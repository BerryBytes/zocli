name: Auto-Release CLI on Push to Main
on:
  push:
    branches:
      - main
  workflow_dispatch:
permissions:
  contents: write
  pull-requests: write  # Permission for creating and merging PRs
jobs:
  release:
    if: "github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '[release]')"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch tags
        run: git fetch --tags

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.20'

      - name: Run Tests
        run: go test ./...

      - name: Check for changelog script
        run: test -f generate-changelog.sh || (echo "generate-changelog.sh not found!" && exit 1)

      - name: Generate Changelog
        run: chmod +x generate-changelog.sh && ./generate-changelog.sh

      - name: Create branch and commit updated changelog
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"

          BRANCH_NAME="changelog-update-$(date +%s)"
          git checkout -b "$BRANCH_NAME"

          git add .
          git status
          git commit -m "Update CHANGELOG.md"
          git push origin "$BRANCH_NAME"

      - name: Create Pull Request
        id: create_pr
        run: |
          PR_URL=$(gh pr create --base ${{ github.ref_name }} --head "$BRANCH_NAME" --title "Update CHANGELOG.md" --body "Automated changelog update generated by GitHub Actions." --reviewer leodahal4)
          echo "PR_URL=$PR_URL" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.MY_TOKEN_FOR_RELEASE }}

      - name: Get previous tag
        id: previous_tag
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.1")
          echo "previous_tag=$PREV_TAG" >> $GITHUB_OUTPUT

      - name: Increment version and ensure unique tag
        id: new_version
        run: |
          PREV_TAG=${{ steps.previous_tag.outputs.previous_tag }}
          VERSION=$(echo $PREV_TAG | sed 's/^v//')
          COMMIT_MSG=$(git log -1 --pretty=%B)

          if echo "$COMMIT_MSG" | grep -qi "BREAKING CHANGE"; then
            NEW_VERSION=$(echo $VERSION | awk -F. '{print $1+1".0.0"}')
          elif echo "$COMMIT_MSG" | grep -qi "^feat:"; then
            NEW_VERSION=$(echo $VERSION | awk -F. '{print $1"."$2+1".0"}')
          else
            NEW_VERSION=$(echo $VERSION | awk -F. '{print $1"."$2"."$3+1}')
          fi

          NEW_TAG="v$NEW_VERSION"
          while git rev-parse "$NEW_TAG" >/dev/null 2>&1; do
            echo "Tag $NEW_TAG already exists, incrementing patch version..."
            NEW_VERSION=$(echo $NEW_VERSION | awk -F. '{print $1"."$2"."$3+1}')
            NEW_TAG="v$NEW_VERSION"
          done

          echo "New unique version: $NEW_TAG"
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT

      - name: Create new tag
        run: |
          git tag ${{ steps.new_version.outputs.new_tag }}
          git push origin ${{ steps.new_version.outputs.new_tag }}

      - name: Ensure clean Git state
        run: |
          git reset --hard
          git clean -fd
          rm dist -rf

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --clean
        env:
          GITHUB_TOKEN: ${{ secrets.MY_TOKEN_FOR_RELEASE }}
