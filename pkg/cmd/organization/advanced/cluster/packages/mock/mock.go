// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/cmd/organization/advanced/cluster/packages/interface.go

// Package mock_packages is a generated GoMock package.
package mock_packages

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cobra "github.com/spf13/cobra"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// InstallRunner mocks base method.
func (m *MockInterface) InstallRunner(arg0 *cobra.Command, arg1 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InstallRunner", arg0, arg1)
}

// InstallRunner indicates an expected call of InstallRunner.
func (mr *MockInterfaceMockRecorder) InstallRunner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstallRunner", reflect.TypeOf((*MockInterface)(nil).InstallRunner), arg0, arg1)
}

// StatusAll mocks base method.
func (m *MockInterface) StatusAll() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StatusAll")
}

// StatusAll indicates an expected call of StatusAll.
func (mr *MockInterfaceMockRecorder) StatusAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusAll", reflect.TypeOf((*MockInterface)(nil).StatusAll))
}

// StatusRunner mocks base method.
func (m *MockInterface) StatusRunner(arg0 *cobra.Command, arg1 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StatusRunner", arg0, arg1)
}

// StatusRunner indicates an expected call of StatusRunner.
func (mr *MockInterfaceMockRecorder) StatusRunner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusRunner", reflect.TypeOf((*MockInterface)(nil).StatusRunner), arg0, arg1)
}

// UnInstallRunner mocks base method.
func (m *MockInterface) UnInstallRunner(arg0 *cobra.Command, arg1 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UnInstallRunner", arg0, arg1)
}

// UnInstallRunner indicates an expected call of UnInstallRunner.
func (mr *MockInterfaceMockRecorder) UnInstallRunner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnInstallRunner", reflect.TypeOf((*MockInterface)(nil).UnInstallRunner), arg0, arg1)
}
