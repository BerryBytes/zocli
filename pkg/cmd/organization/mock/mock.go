// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/cmd/organization/interface.go

// Package mock_organization is a generated GoMock package.
package mock_organization

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cobra "github.com/spf13/cobra"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// DeleteRunner mocks base method.
func (m *MockInterface) DeleteRunner(arg0 *cobra.Command, arg1 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteRunner", arg0, arg1)
}

// DeleteRunner indicates an expected call of DeleteRunner.
func (mr *MockInterfaceMockRecorder) DeleteRunner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRunner", reflect.TypeOf((*MockInterface)(nil).DeleteRunner), arg0, arg1)
}

// GetOrganizations mocks base method.
func (m *MockInterface) GetOrganizations() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetOrganizations")
}

// GetOrganizations indicates an expected call of GetOrganizations.
func (mr *MockInterfaceMockRecorder) GetOrganizations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrganizations", reflect.TypeOf((*MockInterface)(nil).GetOrganizations))
}

// GetRunner mocks base method.
func (m *MockInterface) GetRunner(arg0 *cobra.Command, arg1 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetRunner", arg0, arg1)
}

// GetRunner indicates an expected call of GetRunner.
func (mr *MockInterfaceMockRecorder) GetRunner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunner", reflect.TypeOf((*MockInterface)(nil).GetRunner), arg0, arg1)
}

// GetSingleOrganization mocks base method.
func (m *MockInterface) GetSingleOrganization() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetSingleOrganization")
}

// GetSingleOrganization indicates an expected call of GetSingleOrganization.
func (mr *MockInterfaceMockRecorder) GetSingleOrganization() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSingleOrganization", reflect.TypeOf((*MockInterface)(nil).GetSingleOrganization))
}

// PrintOrganizationTable mocks base method.
func (m *MockInterface) PrintOrganizationTable() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrintOrganizationTable")
}

// PrintOrganizationTable indicates an expected call of PrintOrganizationTable.
func (mr *MockInterfaceMockRecorder) PrintOrganizationTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintOrganizationTable", reflect.TypeOf((*MockInterface)(nil).PrintOrganizationTable))
}

// UseDefaultRunner mocks base method.
func (m *MockInterface) UseDefaultRunner(arg0 *cobra.Command, arg1 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UseDefaultRunner", arg0, arg1)
}

// UseDefaultRunner indicates an expected call of UseDefaultRunner.
func (mr *MockInterfaceMockRecorder) UseDefaultRunner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseDefaultRunner", reflect.TypeOf((*MockInterface)(nil).UseDefaultRunner), arg0, arg1)
}
