// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/cmd/environment/env_interface.go

// Package mock_environment is a generated GoMock package.
package mock_environment

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	cobra "github.com/spf13/cobra"
)

// MockEnvironmentInterface is a mock of EnvironmentInterface interface.
type MockEnvironmentInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironmentInterfaceMockRecorder
}

// MockEnvironmentInterfaceMockRecorder is the mock recorder for MockEnvironmentInterface.
type MockEnvironmentInterfaceMockRecorder struct {
	mock *MockEnvironmentInterface
}

// NewMockEnvironmentInterface creates a new mock instance.
func NewMockEnvironmentInterface(ctrl *gomock.Controller) *MockEnvironmentInterface {
	mock := &MockEnvironmentInterface{ctrl: ctrl}
	mock.recorder = &MockEnvironmentInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvironmentInterface) EXPECT() *MockEnvironmentInterfaceMockRecorder {
	return m.recorder
}

// AskChanges mocks base method.
func (m *MockEnvironmentInterface) AskChanges() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AskChanges")
}

// AskChanges indicates an expected call of AskChanges.
func (mr *MockEnvironmentInterfaceMockRecorder) AskChanges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskChanges", reflect.TypeOf((*MockEnvironmentInterface)(nil).AskChanges))
}

// AskDeleteConfirmation mocks base method.
func (m *MockEnvironmentInterface) AskDeleteConfirmation() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AskDeleteConfirmation")
}

// AskDeleteConfirmation indicates an expected call of AskDeleteConfirmation.
func (mr *MockEnvironmentInterfaceMockRecorder) AskDeleteConfirmation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AskDeleteConfirmation", reflect.TypeOf((*MockEnvironmentInterface)(nil).AskDeleteConfirmation))
}

// DeleteEnvByID mocks base method.
func (m *MockEnvironmentInterface) DeleteEnvByID() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteEnvByID")
}

// DeleteEnvByID indicates an expected call of DeleteEnvByID.
func (mr *MockEnvironmentInterfaceMockRecorder) DeleteEnvByID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnvByID", reflect.TypeOf((*MockEnvironmentInterface)(nil).DeleteEnvByID))
}

// DeleteRunner mocks base method.
func (m *MockEnvironmentInterface) DeleteRunner(arg0 *cobra.Command, arg1 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteRunner", arg0, arg1)
}

// DeleteRunner indicates an expected call of DeleteRunner.
func (mr *MockEnvironmentInterfaceMockRecorder) DeleteRunner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRunner", reflect.TypeOf((*MockEnvironmentInterface)(nil).DeleteRunner), arg0, arg1)
}

// FetchEnvironment mocks base method.
func (m *MockEnvironmentInterface) FetchEnvironment(id string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FetchEnvironment", id)
}

// FetchEnvironment indicates an expected call of FetchEnvironment.
func (mr *MockEnvironmentInterfaceMockRecorder) FetchEnvironment(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchEnvironment", reflect.TypeOf((*MockEnvironmentInterface)(nil).FetchEnvironment), id)
}

// GetEnvironmentOverview mocks base method.
func (m *MockEnvironmentInterface) GetEnvironmentOverview(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetEnvironmentOverview", arg0)
}

// GetEnvironmentOverview indicates an expected call of GetEnvironmentOverview.
func (mr *MockEnvironmentInterfaceMockRecorder) GetEnvironmentOverview(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnvironmentOverview", reflect.TypeOf((*MockEnvironmentInterface)(nil).GetEnvironmentOverview), arg0)
}

// GetRunner mocks base method.
func (m *MockEnvironmentInterface) GetRunner(arg0 *cobra.Command, arg1 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetRunner", arg0, arg1)
}

// GetRunner indicates an expected call of GetRunner.
func (mr *MockEnvironmentInterfaceMockRecorder) GetRunner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunner", reflect.TypeOf((*MockEnvironmentInterface)(nil).GetRunner), arg0, arg1)
}

// OverviewRunner mocks base method.
func (m *MockEnvironmentInterface) OverviewRunner(arg0 *cobra.Command, arg1 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OverviewRunner", arg0, arg1)
}

// OverviewRunner indicates an expected call of OverviewRunner.
func (mr *MockEnvironmentInterfaceMockRecorder) OverviewRunner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OverviewRunner", reflect.TypeOf((*MockEnvironmentInterface)(nil).OverviewRunner), arg0, arg1)
}

// PrintMultiEnvs mocks base method.
func (m *MockEnvironmentInterface) PrintMultiEnvs() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrintMultiEnvs")
}

// PrintMultiEnvs indicates an expected call of PrintMultiEnvs.
func (mr *MockEnvironmentInterfaceMockRecorder) PrintMultiEnvs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintMultiEnvs", reflect.TypeOf((*MockEnvironmentInterface)(nil).PrintMultiEnvs))
}

// PrintOverviewTable mocks base method.
func (m *MockEnvironmentInterface) PrintOverviewTable() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrintOverviewTable")
}

// PrintOverviewTable indicates an expected call of PrintOverviewTable.
func (mr *MockEnvironmentInterfaceMockRecorder) PrintOverviewTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintOverviewTable", reflect.TypeOf((*MockEnvironmentInterface)(nil).PrintOverviewTable))
}

// PrintSingleEnvTable mocks base method.
func (m *MockEnvironmentInterface) PrintSingleEnvTable() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PrintSingleEnvTable")
}

// PrintSingleEnvTable indicates an expected call of PrintSingleEnvTable.
func (mr *MockEnvironmentInterfaceMockRecorder) PrintSingleEnvTable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrintSingleEnvTable", reflect.TypeOf((*MockEnvironmentInterface)(nil).PrintSingleEnvTable))
}

// RenameEnv mocks base method.
func (m *MockEnvironmentInterface) RenameEnv() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenameEnv")
}

// RenameEnv indicates an expected call of RenameEnv.
func (mr *MockEnvironmentInterfaceMockRecorder) RenameEnv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameEnv", reflect.TypeOf((*MockEnvironmentInterface)(nil).RenameEnv))
}

// RenameRunner mocks base method.
func (m *MockEnvironmentInterface) RenameRunner(arg0 *cobra.Command, arg1 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RenameRunner", arg0, arg1)
}

// RenameRunner indicates an expected call of RenameRunner.
func (mr *MockEnvironmentInterfaceMockRecorder) RenameRunner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameRunner", reflect.TypeOf((*MockEnvironmentInterface)(nil).RenameRunner), arg0, arg1)
}

// StartEnvByID mocks base method.
func (m *MockEnvironmentInterface) StartEnvByID() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartEnvByID")
}

// StartEnvByID indicates an expected call of StartEnvByID.
func (mr *MockEnvironmentInterfaceMockRecorder) StartEnvByID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartEnvByID", reflect.TypeOf((*MockEnvironmentInterface)(nil).StartEnvByID))
}

// StartRunner mocks base method.
func (m *MockEnvironmentInterface) StartRunner(arg0 *cobra.Command, arg1 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartRunner", arg0, arg1)
}

// StartRunner indicates an expected call of StartRunner.
func (mr *MockEnvironmentInterfaceMockRecorder) StartRunner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartRunner", reflect.TypeOf((*MockEnvironmentInterface)(nil).StartRunner), arg0, arg1)
}

// StopEnvByID mocks base method.
func (m *MockEnvironmentInterface) StopEnvByID() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopEnvByID")
}

// StopEnvByID indicates an expected call of StopEnvByID.
func (mr *MockEnvironmentInterfaceMockRecorder) StopEnvByID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopEnvByID", reflect.TypeOf((*MockEnvironmentInterface)(nil).StopEnvByID))
}

// StopRunner mocks base method.
func (m *MockEnvironmentInterface) StopRunner(arg0 *cobra.Command, arg1 []string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopRunner", arg0, arg1)
}

// StopRunner indicates an expected call of StopRunner.
func (mr *MockEnvironmentInterfaceMockRecorder) StopRunner(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopRunner", reflect.TypeOf((*MockEnvironmentInterface)(nil).StopRunner), arg0, arg1)
}
